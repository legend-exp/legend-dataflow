name: legend-dataflow

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
      - "releases/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 3

jobs:
  unit-tests:
    name: Run legend-dataflow unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
        os: [ubuntu-latest, macos-13]

    steps:
      - uses: actions/checkout@v5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get dependencies and install legend-dataflow
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install --upgrade .[test]
      - name: Run unit tests
        run: |
          python -m pytest

  run-dataflow:
    if: github.event.pull_request.head.repo.fork == false
    name: Run the Snakemake workflow
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
        os: [ubuntu-latest, macos-13]

    steps:
      - uses: actions/checkout@v5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set LEGEND_METADATA variable
        run: |
          echo "LEGEND_METADATA=$GITHUB_WORKSPACE/inputs" >> $GITHUB_ENV

      - name: Clone legend-metadata
        uses: actions/checkout@v5
        with:
          repository: legend-exp/legend-metadata
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.CLONE_LEGEND_METADATA }}
          path: ${{ env.LEGEND_METADATA }}

      - name: Recursively update legend-metadata submodules
        run: |
          cd "$LEGEND_METADATA" && git submodule update --recursive --remote

      - name: Run data production tests
        run: ./tests/runprod/run-all.sh

  test-coverage:
    name: Calculate and upload test coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Generate Report
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install --upgrade .[test]
          python -m pytest --cov=legenddataflow --cov-report=xml
      - name: Upload Coverage to codecov.io
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
